#!/data/data/com.termux/files/usr/bin/bash

export INSTALL=0
export UPDATE=0
export CLEAN=0
export NUKE=0

case "$1" in
  "install")
    INSTALL=1
    ;;
  "update")
    UPDATE=1
    ;;
  "cleaninstall")
    INSTALL=1
    CLEAN=1
    ;;
  "cleanupdate")
    UPDATE=1
    CLEAN=1
    ;;
  "nuke")
    NUKE=1
    ;;
  *)
    echo "Usage: $0 {install|update|cleaninstall|cleanupdate|nuke}"
    exit 1
    ;;
esac

export MAINTAINER=JoshuaDoes
export VER="v1.13.0"
export DL=git
export HOSTER=JoshuaDoes
export PROVIDER=GitHub
export REPO="https://github.com/JoshuaDoes/winehangover-image"
export BRANCH=dev

export WINEPART=".hangover"
export WINEPREFIX="$HOME/$WINEPART"
export CACHE="$WINEPREFIX/.cache"
export WINEPATH="$WINEPREFIX/wine"
export WINEBIN="$WINEPATH/arm64-v8a/bin"
export WINELIB="$WINEPATH/arm64-v8a/lib/wine"
export WINELIBWIN="$WINELIB/aarch64-windows"
export TESTPATH="$WINEPREFIX/test"
export PATH="$WINEBIN:$PATH"

export VK_ICD_FILENAMES=$PREFIX/share/vulkan/icd.d/wrapper_icd.aarch64.json
export MESA_VK_WSI_PRESENT_MODE=mailbox
export DISPLAY=:0

export MNT="$WINEPREFIX/dosdevices"
export C="$WINEPREFIX/drive_c"
export T="$MNT/t:"
export Z="$MNT/z:"

export UserProfileDir="$C/users/$USER"
export UserDesktopDir="$UserProfileDir/Desktop"

export PublicProfileDir="$C/users/Public"
export PublicDesktopDir="$PublicProfileDir/Desktop"

export WINEARCH=win64
export WINEDEBUG=-all
export WINEESYNC=1
export WINEESYNC_TERMUX=1
export DXVK_HUD=version,fps,api,gpuload,devinfo,compiler,scale=0.65

declare -a DXVK
if [ -f $C/windows/system32/d3d8.dll ]; then
  DXVK+=("d3d8")
fi
if [ -f $C/windows/system32/d3d9.dll ]; then
  DXVK+=("d3d9")
fi
if [ -f $C/windows/system32/d3d10.dll ]; then
  DXVK+=("d3d10")
fi
if [ -f $C/windows/system32/d3d10_1.dll ]; then
  DXVK+=("d3d10_1")
fi
if [ -f $C/windows/system32/d3d10core.dll ]; then
  DXVK+=("d3d10core")
fi
if [ -f $C/windows/system32/d3d11.dll ]; then
  DXVK+=("d3d11")
fi
if [ -f $C/windows/system32/dxgi.dll ]; then
  DXVK+=("dxgi")
fi
export WINEDLLOVERRIDES="$(IFS=,; echo "${DXVK[*]}")=n,b"

# Hide outputs when unnecessary
pushd() {
  command pushd "$@" >/dev/null
}
popd() {
  command popd "$@" >/dev/null
}
wait() {
  command wait "$@" >/dev/null 2>&1
}
disown() {
  command disown "$@" >/dev/null 2>&1
}
mkdir() {
  command mkdir -p "$@" >/dev/null 2>&1
}
rm() {
  command rm "$@" >/dev/null 2>&1
}
mv() {
  command mv "$@" >/dev/null 2>&1
}
unzip() {
  command unzip -o "$@" >/dev/null 2>&1
}
pkg() {
  command pkg "$@" >/dev/null 2>&1
}
dpkg() {
  command dpkg "$@" >/dev/null 2>&1
}
wget() {
  command wget "$1" --timestamping --quiet --show-progress
}
wget2() {
  command wget "$1" -O "$2" --timestamping --quiet --show-progress
}
wine() {
  LD_LIBRARY_PATH="$WINEPREFIX/test" \
    command $WINEBIN/wine "$@" >/dev/null 2>&1
}
wineboot() {
  LD_LIBRARY_PATH="$WINEPREFIX/test" \
    command $WINEBIN/wineboot "$@" >/dev/null 2>&1
}
wineserver() {
  LD_LIBRARY_PATH="$WINEPREFIX/test" \
    command $WINEBIN/wineserver "$@" >/dev/null 2>&1
}
winetricks() {
  LD_LIBRARY_PATH="$WINEPREFIX/test" \
    command $WINEBIN/winetricks "$@" #>/dev/null 2>&1
}
msiexec() {
  wine msiexec /i "$1" /quiet /qn /norestart
}
winedesktop() {
  wine explorer /desktop=shell,-1x-1 "$cmd" "${args[@]}" >/dev/null 2>&1
}
openbox-session() {
  command openbox-session >/dev/null 2>&1
}
xfce4-session() {
  command xfce4-session >/dev/null 2>&1
}

kill() {
  command kill "$@" 2>/dev/null
}
killname() {
  for proc in "${@}"; do
    kill -9 $(ps aux | grep -i "$proc" | awk '{print $2}' | tr '\n' ' ')
  done
}
killjobs() {
  kill -9 $(jobs -p)
}
killconfirmed() {
  killjobs
  killname "wineserver"
  killname "C:" "T:" "Z:" "\.exe"
  killname "dbus-daemon" "dbus-launch"
  killname "pulseaudio" "com.termux.x11"
}

info() {
  echo ""
  echo "  Termux/Hangover $VER"
  if [ $UPDATE -eq 1 ]; then
    echo "  > Updater"
  elif [ $INSTALL -eq 1 ]; then
    echo "  > Installer"
  elif [ $CLEAN -eq 1 ]; then
    echo "  > Clean Installer"
  elif [ $NUKE -eq 1 ]; then
    echo "  > Nuker"
  fi
  echo ""
  echo "  Maintainer: $MAINTAINER"
  echo "  Hoster:     $HOSTER"
  echo "  Provider:   $PROVIDER"
  case $DL in
    git)
      echo "  Repo:       $REPO"
      echo "  Branch:     $BRANCH"
      ;;
    direct)
      echo "  Source:     $REPO"
      ;;
  esac
}

startx() {
  echo "  > Starting an X server"
  termux-x11 -retro $DISPLAY >/dev/null 2>&1 &
  disown
  sleep 1
}
stopwine() {
  echo "  > Shutting down Wine prefix"
  wineboot --end-session
}
stopall() {
  stopwine
  killconfirmed
}

### main ###

stopall
clear
info
echo ""

if [ $CLEAN -eq 1 ]; then
  mv "$CACHE" "$TMPDIR/.hangover-cache"
  rm -rf "$WINEPREFIX"
  mkdir "$WINEPREFIX"
  mv "$TMPDIR/.hangover-cache" "$CACHE"
elif [ $NUKE -eq 1 ]; then
  rm -rf "$WINEPREFIX"
  rm ~/bin/hangover-*
  rm ~/bin/hangover
  rm ~/bin/install-hangover

  echo "  * Nuke complete!"
  echo ""
  exit 0
fi

if [ $UPDATE -eq 1 ]; then
  if [ ! -d $WINEPREFIX ]; then
    echo "  * Cannot perform an update without install!"
    echo ""
    exit 1
  fi
fi

if [ $UPDATE -eq 1 ]; then
PS3='  Which download mirror should we use? (1-3) '
menuvar=("https git.joshuado.es" "https github.com" "ssh github.com" "Exit")
select menuvar in "${menuvar[@]}"
do
  case $menuvar in
    "https git.joshuado.es")
      export DL=git
      export HOSTER=JoshuaDoes
      export PROVIDER=JoshuaDoes
      export REPO="https://git.joshuado.es/hangover"
      export BRANCH=dev
      break;;
    "https github.com")
      export DL=git
      export HOSTER=JoshuaDoes
      export PROVIDER=GitHub
      export REPO="https://github.com/JoshuaDoes/winehangover-image"
      export BRANCH=dev
      break;;
    "ssh github.com")
      export DL=git
      export HOSTER=JoshuaDoes
      export PROVIDER=GitHub
      export REPO="git@github.com:JoshuaDoes/winehangover-image"
      export BRANCH=dev
      break;;
    "Exit")
      exit 0
      break;;
    *) echo "Invalid option.";;
  esac
done
echo ""
fi

PS3='  Which Vulkan ICD should we use? (1-2) '
menuvar=("Hangover" "I'll handle my Vulkan" "Exit")
select menuvar in "${menuvar[@]}"
do
  case $menuvar in
    "Hangover")
      export PLAT=hangover
      export PLATS=Hangover
      break;;
    "I'll handle my Vulkan")
      export PLAT=null
      export PLATS=Null
      break;;
    "Exit")
      exit 0
      break;;
    *) echo "Invalid option.";;
  esac
done

echo ""
#PS3='  Which DXVK release should we use? (1-5) '
#menuvar=("Hangover" "Dyneteve" "Airis" "JoshuaDoes" "Doitsujin" "Exit")
#select menuvar in "${menuvar[@]}"
#do
#  case $menuvar in
#    "Hangover")
#      export DXVKDLLS=("d3d8.dll" "d3d9.dll" "d3d10core.dll" "d3d11.dll" "dxgi.dll")
#      export DXVKREL=hangover
#      export DXVKS=Hangover
#      break;;
#    "Dyneteve")
#      export DXVKDLLS=("d3d8.dll" "d3d9.dll" "d3d10core.dll" "d3d11.dll" "dxgi.dll")
#      export DXVKREL=dyneteve
#      export DXVKS=Dyneteve
#      break;;
#    "JoshuaDoes")
#      export DXVKDLLS=("d3d8.dll" "d3d9.dll" "d3d10core.dll" "d3d11.dll" "dxgi.dll")
#      export DXVKREL=master
#      export DXVKS=JoshuaDoes
#      break;;
#    "Airis")
#      export DXVKDLLS=("d3d9.dll" "d3d10.dll" "d3d10_1.dll" "d3d10core.dll" "d3d11.dll" "dxgi.dll")
#      export DXVKREL=airis
#      export DXVKS=Airis
#      break;;
#    "Doitsujin")
      export DXVKDLLS=("d3d8.dll" "d3d9.dll" "d3d10core.dll" "d3d11.dll" "dxgi.dll")
      export DXVKREL=doitsujin
      export DXVKS=Doitsujin
#      break;;
#    "Exit")
#      exit 0
#      break;;
#    *) echo "Invalid option.";;
#  esac
#done

clear
info

# Migrations to latest update
if [ $UPDATE -eq 1 ]; then
  if [ -d $TMPDIR/hangover ]; then
    echo ""
    echo "  > Removing legacy download cache"
    rm -rf $TMPDIR/hangover
  fi
  if [ ! -d "$WINEPREFIX" ]; then
    for INST in "$HOME/.winehangover"; do
      if [ -d "$INST" ]; then
        echo ""
        echo "  > Migrating image to:"
        echo "    $WINEPREFIX"
        mv "$INST" "$WINEPREFIX"
        break
      fi
    done
  fi
fi

echo ""
case $DL in
  git)
    pkg install -y git
    if [ ! -d $CACHE/.git ]; then
      echo "  Downloading image!"
      echo ""
      rm -rf $CACHE
      git clone --filter=tree:0 "$REPO" -b $BRANCH $CACHE
    elif [ $UPDATE -eq 1 ]; then
      echo "  Updating image!"
      echo ""
      pushd $CACHE
      git remote set-url origin "$REPO"
      git fetch --all
      git checkout $BRANCH
      git pull
      popd
    fi

    echo ""
    echo "  Most recent git log:"
    pushd $CACHE
    echo "    $(git log -1 --pretty=format:%B | cat)"
    popd
    ;;
  direct)
    echo "  * Direct image downloading not yet implemented!"
    echo ""
    exit 1
    ;;
  *)
    if [ $INSTALL -eq 1] || [ $UPDATE -eq 1 ]; then
      echo "  * Download type $DL is not supported!"
      echo ""
      exit 1
    fi
    ;;
esac

mkdir $WINEPREFIX
pushd $WINEPREFIX

echo ""
echo "  Patching Hangover image unconditionally..."
echo "  > Installing packages"
pkg install -y x11-repo
pkg install -y termux-x11-nightly pulseaudio \
  vulkan-tools vulkan-loader vulkan-loader-generic \
  mesa mesa-demos opengl \
  freeglut glu fontconfig freetype \
  libxrandr libxcomposite libx11 libxrender libxshmfence \
  libdrm libwayland libandroid-shmem \
  libandroid-spawn \
  xz-utils cabextract libgnutls \
  openbox #xfce4
case $PLAT in
  hangover)
    echo "  > Installing Mesa Vulkan ICD wrapper for $PLATS"
    dpkg -i $CACHE/deb/mesa-vulkan-icd-wrapper_latest_aarch64.deb
    ;;
  *) echo "  > Skipping ICD";;
esac
echo "  > Installing Termux:X11"
termux-open $CACHE/apk/termux-x11.apk
echo "  ! If this fails, please manually install:"
echo "    $CACHE/apk/termux11.apk"

echo ""
startx
echo ""

echo "  > Installing Wine"
rm -rf wine
cp -R $CACHE/wine .
echo "  > Installing FEX-Emu"
cp $CACHE/fex/libarm64ecfex.dll $CACHE/fex/libwow64fex.dll $WINELIBWIN/
#echo "  > Installing box64 w/ Strongmem + safe/fast flags"
#cp $CACHE/box64/box64cpu.dll $WINELIBWIN/
echo "  > Copying libraries from Termux"
mkdir test
pushd test
cp $PREFIX/lib/libxcb* $PREFIX/lib/libfontconfig* $PREFIX/lib/libfreetype* \
   $PREFIX/lib/libX* $PREFIX/lib/libvulkan* $PREFIX/lib/libpulse* \
   $PREFIX/lib/libgnutls* \
 .
popd

popd

echo "  > Installing Hangover scripts"
mkdir ~/bin
cp \
  $CACHE/bin/hangover-run $CACHE/bin/hangover-dbg \
  $CACHE/hangover ~/bin/
chmod +x ~/bin/hangover-run
chmod +x ~/bin/hangover-dbg
chmod +x ~/bin/hangover

# Remove any leftover scripts
rm ~/bin/install-hangover
rm ~/bin/hangover-debug
rm ~/bin/hangover-install

if [ -d $C ]; then
  echo "  > Updating the Wine prefix"
  wineboot --update
else
  echo "  > Installing the Wine prefix"
  wineboot --init
fi

echo "  > Applying Windows 11 profile to prefix"
wine winecfg -v win11

echo "  > Installing Hangover registry patches"
cp $CACHE/reg/hangover.reg $WINEPREFIX/

echo "  > Installing Microsoft core fonts"
pushd $C/windows/Fonts
unzip $CACHE/fonts/mscorefonts.zip
popd

echo "  > Installing DXVK x32 (from $DXVKS)"
for dll in ${DXVKDLLS[@]}; do
  cp $CACHE/dxvk/dxvk-$DXVKREL/x32/$dll $C/windows/syswow64/$dll
done
echo "  > Installing DXVK x64 (from $DXVKS)"
for dll in ${DXVKDLLS[@]}; do
  cp $CACHE/dxvk/dxvk-$DXVKREL/x64/$dll $C/windows/system32/$dll
done

echo "  > Installing Wine Gecko (x86)"
msiexec $CACHE/bin/windows/wine-gecko-latest-x86.msi "C:\Program Files (x86)\Wine\Gecko"
echo "  > Installing Wine Gecko (x64)"
msiexec $CACHE/bin/windows/wine-gecko-latest-x86_64.msi "C:\Program Files\Wine\Gecko"

echo "  > Installing Wine Mono"
msiexec $CACHE/bin/windows/wine-mono-latest.msi "C:\Program Files\Wine\Mono"

echo "  > Installing 7-Zip (arm64)"
wine $CACHE/bin/windows/7z-latest-arm64.exe /S /D="C:\Program Files\7-Zip"

#echo "  > Installing VLC Media Player (arm64)"
#wine $CACHE/bin/windows/vlc-dev-latest-arm64.exe /L=1033 /S /D="C:\Program Files\VideoLAN\VLC"
#rm "$PublicDesktopDir/VLC media player.lnk"
#rm "$UserDesktopDir/VLC media player.desktop"

#echo "  > Installing winetricks"
#cp $CACHE/bin/winetricks $WINEBIN/
#chmod +x $WINEBIN/winetricks

#echo "  > Installing .NET 6.0"
#winetricks -q dotnetdesktop6
#echo "  > Installing Microsoft Paint (x86)"
#winetricks arch=64 apps mspaint

mkdir $C/bin

echo "  > Installing vulkaninfo (x64)"
cp $CACHE/bin/windows/vulkaninfo-x64.exe $C/bin/
echo "  > Installing Coreinfo (x64)"
cp $CACHE/bin/windows/Coreinfo64.exe $C/bin/
echo "  > Installing Explorer++ (x64)"
cp $CACHE/bin/windows/Explorer++.exe $C/bin/

echo "  > Mounting T: to $HOME"
rm "$T"
ln -s "$HOME" "$T"
echo "  > Mounting Z: to $EXTERNAL_STORAGE"
rm "$Z"
ln -s "$EXTERNAL_STORAGE" "$Z"

echo ""
FOUND_HO=1
command -v hangover >/dev/null 2>&1 || {
  FOUND_HO=0
}
if [ $FOUND_HO -eq 0 ]; then
  echo "  * Unable to find Hangover in PATH!"
  if echo "$PATH" | grep -q "HOME/bin"; then
    echo "  * Already found declaration in .profile, use Bash please?"
  else
    echo "export PATH=\"\$HOME/bin:\$PATH\"" >> ~/.profile
    source ~/.profile
    echo "  * Added \$HOME/bin to PATH! Source .profile or restart Termux."
  fi
else
  echo "  * Found Hangover in PATH!"
fi

echo ""
FOUND_W=1
command -v wineserver >/dev/null 2>&1 || {
  FOUND_W=0
}
if [ $FOUND_W -eq 0 ]; then
  echo "  * Unable to find Wine in PATH!"
  if echo "$PATH" | grep -q "$WINEBIN"; then
    echo "  * Already found declaration in .profile, use Bash please?"
  else
    echo "export PATH=\"$WINEBIN:\$PATH\"" >> ~/.profile
    source ~/.profile
    echo "  * Added $WINEBIN to PATH! Source .profile or restart Termux."
  fi
else
  echo "  * Found Wine in PATH!"
fi

echo ""
if [ ! -d $HOME/storage ]; then
  echo "  * Need permission to mount internal storage!"
  termux-setup-storage
  if [ ! -d $HOME/storage ]; then
    echo "  * Permission refused! Try running termux-setup-storage later."
  else
    echo "  * Permission granted!"
  fi
else
  echo "  * Permission to mount internal storage granted!"
fi

stopall

echo ""
if [ $UPDATE -eq 1 ]; then
  echo "  Update complete!"
elif [ $INSTALL -eq 1 ]; then
  echo "  Install complete!"
fi
if [ $CLEAN -eq 1 ]; then
  echo "  * As requested, we reset your install!"
fi
echo ""
echo "  Cache location:"
echo "    $CACHE"

echo ""
echo "  Launch the Hangover manager like so:"
echo "    hangover"
echo ""
echo "  If you haven't disabled the phantom process killer,"
echo "  do so now with either root or ADB (Shizuku supported)."
echo ""
echo "  First, disable the phantom process monitor:"
echo "    settings put global settings_enable_monitor_phantom_procs false"
echo ""
echo "  Finally, raise the limit to infinity just to be safe:"
echo "    device_config put activity_manager max_phantom_processes 2147483647"

echo ""
echo "  * Done! Nothing else left to do."
echo ""
