#!/data/data/com.termux/files/usr/bin/bash

HOSTER=JoshuaDoes
REPO="https://github.com/JoshuaDoes/winehangover-image"
BRANCH=dev
VER="v1.10.17"

export WINEPREFIX="$HOME/.winehangover"
export CACHE="$WINEPREFIX/.cache"
export WINEPATH="$WINEPREFIX/wine"
export WINEBIN="$WINEPATH/arm64-v8a/bin"
export WINELIB="$WINEPATH/arm64-v8a/lib/wine"
export WINELIBWIN="$WINELIB/aarch64-windows"
export TESTPATH="$WINEPREFIX/test"
export PATH="$WINEBIN:$PATH"

export VK_ICD_FILENAMES=$PREFIX/share/vulkan/icd.d/wrapper_icd.aarch64.json
export MESA_VK_WSI_PRESENT_MODE=mailbox
export DISPLAY=:0

export MNT="$WINEPREFIX/dosdevices"
export C="$WINEPREFIX/drive_c"
export T="$MNT/t:"
export Z="$MNT/z:"

export WINEARCH=win64

# Screen wipe
clear

# Hide outputs when unnecessary
pushd() {
  command pushd "$@" >/dev/null
}
popd() {
  command popd "$@" >/dev/null
}
mkdir() {
  command mkdir -p "$@" >/dev/null 2>&1
}
rm() {
  command rm "$@" >/dev/null 2>&1
}
mv() {
  command mv "$@" >/dev/null 2>&1
}
unzip() {
  command unzip -o "$@" >/dev/null 2>&1
}
pkg() {
  command pkg "$@" >/dev/null 2>&1
}
dpkg() {
  command dpkg "$@" >/dev/null 2>&1
}
wget() {
  command wget "$1" --timestamping --quiet --show-progress
}
wget2() {
  command wget "$1" -O "$2" --timestamping --quiet --show-progress
}
git() {
  command git "$@"
}
wine() {
  LD_LIBRARY_PATH="$WINEPREFIX/test" \
    command $WINEBIN/wine "$@" >/dev/null 2>&1
}
wineboot() {
  LD_LIBRARY_PATH="$WINEPREFIX/test" \
    command $WINEBIN/wineboot "$@" >/dev/null 2>&1
}
wineserver() {
  LD_LIBRARY_PATH="$WINEPREFIX/test" \
    command $WINEBIN/wineserver "$@" >/dev/null 2>&1
}
winetricks() {
  LD_LIBRARY_PATH="$WINEPREFIX/test" \
    command $WINEBIN/winetricks "$@" #>/dev/null 2>&1
}
msiexec() {
  wine msiexec /i "$1" /quiet /qn /norestart
}
startx() {
  echo ""
  echo "  > Starting an X server"
  termux-x11 -retro $DISPLAY >/dev/null 2>&1 &
  export TXPID=$!
  #am start --user 0 -n com.termux.x11/.MainActivity >/dev/null 2>&1
  sleep 1
}
stopx() {
  echo ""
  echo "  > Stopping the X server"
  #am broadcast -a com.termux.x11.ACTION_STOP -p com.termux.x11 >/dev/null 2>&1
  pkill -x com.termux.x11 >/dev/null 2>&1
  kill $(jobs -p) >/dev/null 2>&1
  kill $TXPID >/dev/null 2>&1
  sleep 1
  echo "  > Shutting down Wine prefix"
  wineboot --end-session >/dev/null 2>&1
  wineboot --kill --force >/dev/null 2>&1
  wineserver --kill=9 >/dev/null 2>&1
  wineserver --wait >/dev/null 2>&1
}
info() {
  echo ""
  echo "  Termux/Hangover Install & Update"
  echo "    Hosted by $HOSTER"
  echo "    > $VER"
  echo "  REPO: $REPO"
}

stopx
clear
info
echo ""

PS3='  Which Vulkan ICD should we use? (1-2) '
menuvar=("Hangover" "I'll handle my Vulkan" "Exit")
select menuvar in "${menuvar[@]}"
do
  case $menuvar in
    "Hangover")
      export PLAT=hangover
      export PLATS=Hangover
      break;;
    "I'll handle my Vulkan")
      export PLAT=null
      export PLATS=Null
      break;;
    "Exit")
      exit 0
      break;;
    *) echo "Invalid option.";;
  esac
done

echo ""

export DXVKDLLS=("d3d8.dll" "d3d9.dll" "d3d10core.dll" "d3d11.dll" "dxgi.dll")

PS3='  Which DXVK release should we use? (1-5) '
menuvar=("Dyneteve" "Hangover" "Airis" "JoshuaDoes" "Doitsujin" "Exit")
select menuvar in "${menuvar[@]}"
do
  case $menuvar in
    "Dyneteve")
      export DXVKREL=dyneteve
      export DXVKS=Dyneteve
      break;;
    "Hangover")
      export DXVKREL=hangover
      export DXVKS=Hangover
      break;;
    "JoshuaDoes")
      export DXVKREL=master
      export DXVKS=JoshuaDoes
      break;;
    "Airis")
      DXVKDLLS=("d3d9.dll" "d3d10.dll" "d3d10_1.dll" "d3d10core.dll" "d3d11.dll" "dxgi.dll")
      export DXVKREL=airis
      export DXVKS=Airis
      break;;
    "Doitsujin")
      DXVKDLLS=("d3d9.dll" "d3d10.dll" "d3d10_1.dll" "d3d10core.dll" "d3d11.dll" "dxgi.dll")
      export DXVKREL=doitsujin
      export DXVKS=Doitsujin
      break;;
    "Exit")
      exit 0
      break;;
    *) echo "Invalid option.";;
  esac
done

clear
info

if [ -d $TMPDIR/hangover ]; then
  rm -rf $TMPDIR/hangover
fi

echo ""
echo "  Downloading!"
pkg install -y git
if [ ! -d $CACHE/.git ]; then
  rm -rf $CACHE
  git clone "$REPO" -b $BRANCH $CACHE
else
  pushd $CACHE
  git pull
  popd
fi

echo ""
echo "  Most recent changelog message:"
pushd $CACHE
echo "    $(git log -1 --pretty=format:%B | cat)"
popd

mkdir $WINEPREFIX
pushd $WINEPREFIX

echo ""
echo "  Patching Hangover image unconditionally..."
echo "  > Installing Termux:X11"
termux-open $CACHE/apk/termux11.apk
echo "  > Installing packages"
pkg install -y x11-repo
pkg install -y termux-x11-nightly pulseaudio \
  vulkan-tools vulkan-loader vulkan-loader-generic \
  mesa mesa-demos opengl \
  freeglut glu fontconfig freetype \
  libxrandr libxcomposite libx11 libxrender libxshmfence \
  libdrm libwayland libandroid-shmem \
  xz-utils cabextract libgnutls \
  openbox #xfce4
case $PLAT in
  hangover)
    echo "  > Installing Mesa Vulkan ICD wrapper for $PLATS"
    dpkg -i $CACHE/deb/mesa-vulkan-icd-wrapper_latest_aarch64.deb
    ;;
  *) echo "  > Skipping ICD";;
esac

startx
echo ""

echo "  > Installing Wine"
rm -rf wine
cp -R $CACHE/wine .
echo "  > Installing FEX-Emu"
cp $CACHE/fex/libarm64ecfex.dll $CACHE/fex/libwow64fex.dll $WINELIBWIN/
echo "  > Installing box64 w/ Strongmem + safe/fast flags"
cp $CACHE/box64/box64cpu.dll $WINELIBWIN/
echo "  > Copying libraries from Termux"
mkdir test
pushd test
cp $PREFIX/lib/libxcb* $PREFIX/lib/libfontconfig* $PREFIX/lib/libfreetype* \
   $PREFIX/lib/libX* $PREFIX/lib/libvulkan* $PREFIX/lib/libpulse* \
   $PREFIX/lib/libgnutls* \
 .
popd

popd

echo "  > Installing Hangover scripts"
mkdir ~/bin
cp \
  $CACHE/bin/hangover $CACHE/bin/hangover-debug \
  $CACHE/install-hangover ~/bin/
chmod +x ~/bin/hangover
chmod +x ~/bin/hangover-debug
chmod +x ~/bin/install-hangover

if [ -d $C ]; then
  echo "  > Updating the Wine prefix"
  wineboot --update
else
  echo "  > Installing the Wine prefix"
  wineboot --init
fi

echo "  > Applying Windows 11 profile to prefix"
wine winecfg -v win11

echo "  > Installing registry"
cp $CACHE/reg/hangover.reg $WINEPREFIX/

echo "  > Installing Microsoft core fonts"
pushd $C/windows/Fonts
unzip $CACHE/fonts/mscorefonts.zip
popd

echo "  > Installing DXVK x32 from $DXVKS"
for dll in ${DXVKDLLS[@]}; do
  cp $CACHE/dxvk/dxvk-$DXVKREL/x32/$dll $C/windows/syswow64/$dll
done
echo "  > Installing DXVK x64 from $DXVKS"
for dll in ${DXVKDLLS[@]}; do
  cp $CACHE/dxvk/dxvk-$DXVKREL/x64/$dll $C/windows/system32/$dll
done

mkdir $C/bin

echo "  > Installing vulkaninfo (x64)"
cp $CACHE/bin/windows/vulkaninfo-x64.exe $C/bin/
echo "  > Installing Coreinfo (x64)"
cp $CACHE/bin/windows/Coreinfo64.exe $C/bin/
echo "  > Installing Explorer++ (x64)"
cp $CACHE/bin/windows/Explorer++.exe $C/bin/

echo "  > Installing 7-Zip (arm64)"
wine $CACHE/bin/windows/7z-latest-arm64.exe /S /D="C:\Program Files\7-Zip"
echo "  > Installing VLC Media Player (arm64)"
wine $CACHE/bin/windows/vlc-dev-latest-arm64.exe /L=1033 /S /D="C:\Program Files\VideoLAN\VLC"
echo "  > Installing Wine Gecko (x86)"
msiexec $CACHE/bin/windows/wine-gecko-latest-x86.msi "C:\Program Files (x86)\Wine\Gecko"
echo "  > Installing Wine Gecko (x64)"
msiexec $CACHE/bin/windows/wine-gecko-latest-x86_64.msi "C:\Program Files\Wine\Gecko"
echo "  > Installing Wine Mono"
msiexec $CACHE/bin/windows/wine-mono-latest.msi "C:\Program Files\Wine\Mono"

#echo "  > Installing winetricks"
#cp $CACHE/bin/winetricks $WINEBIN/
#chmod +x $WINEBIN/winetricks

#echo "  > Installing .NET 6.0"
#winetricks -q dotnetdesktop6
#echo "  > Installing Microsoft Paint (x86)"
#winetricks arch=64 apps mspaint

echo "  > Mounting T: to $HOME"
rm "$T"
ln -s "$HOME" "$T"
echo "  > Mounting Z: to $EXTERNAL_STORAGE"
rm "$Z"
ln -s "$EXTERNAL_STORAGE" "$Z"

echo ""
echo "  Install complete!"
echo ""
echo "  Cached for reinstalls at:"
echo "    $CACHE"

echo ""
echo "  Launch Hangover like so:"
echo "    hangover"
echo "  If you need to read the debug log or pipe it to a file:"
echo "    hangover-debug"
echo "  To update:"
echo "    install-hangover"
echo "  To reinstall:"
echo "    rm -rf \$HOME/.winehangover && install-hangover"
echo ""
echo "  If you haven't disabled the phantom process killer,"
echo "  do so now with either root or ADB (Shizuku supported)."
echo ""
echo "  First, disable the phantom process monitor:"
echo "    settings put global settings_enable_monitor_phantom_procs false"
echo ""
echo "  Finally, raise the limit to infinity just to be safe:"
echo "    device_config put activity_manager max_phantom_processes 2147483647"

echo ""
FOUND_HO=1
command -v hangover >/dev/null 2>&1 || {
  FOUND_HO=0
}
if [ $FOUND_HO -eq 0 ]; then
  echo "  * Unable to find Hangover in PATH!"
  if echo "$PATH" | grep -q "HOME/bin"; then
    echo "  * Already found declaration in .profile, use Bash please?"
  else
    echo "export PATH=\"\$HOME/bin:\$PATH\"" >> ~/.profile
    source ~/.profile
    echo "  * Added \$HOME/bin to PATH! Source .profile or restart Termux."
  fi
else
  echo "  * Found Hangover in PATH!"
fi

echo ""
FOUND_W=1
command -v wineserver >/dev/null 2>&1 || {
  FOUND_W=0
}
if [ $FOUND_W -eq 0 ]; then
  echo "  * Unable to find Wine in PATH!"
  if echo "$PATH" | grep -q "$WINEBIN"; then
    echo "  * Already found declaration in .profile, use Bash please?"
  else
    echo "export PATH=\"$WINEBIN:\$PATH\"" >> ~/.profile
    source ~/.profile
    echo "  * Added $WINEBIN to PATH! Source .profile or restart Termux."
  fi
else
  echo "  * Found Wine in PATH!"
fi

echo ""
if [ ! -d $HOME/storage ]; then
  echo "  * Need permission to mount internal storage!"
  termux-setup-storage
  if [ ! -d $HOME/storage ]; then
    echo "  * Permission refused! Try running termux-setup-storage later."
  else
    echo "  * Permission granted!"
  fi
else
  echo "  * Permission to mount internal storage granted!"
fi

stopx

echo ""
echo "  * Done! Nothing else left to do."
echo ""
